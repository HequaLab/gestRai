/*
 * File: app/model/richiestaServizio.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rai.model.richiestaServizio', {
    extend: 'Ext.data.Model',

    requires: [
        'Ext.data.field.String',
        'Ext.data.field.Date',
        'Ext.data.field.Number'
    ],

    idProperty: 'richiestaNuovoServizioId',

    fields: [
        {
            name: 'richiestaNuovoServizioId'
        },
        {
            type: 'string',
            name: 'nome'
        },
        {
            type: 'string',
            name: 'note'
        },
        {
            type: 'date',
            name: 'data'
        },
        {
            type: 'date',
            name: 'timeStamp'
        },
        {
            type: 'date',
            name: 'dataFine'
        },
        {
            name: 'ora'
        },
        {
            type: 'string',
            name: 'ore'
        },
        {
            name: 'uorg'
        },
        {
            name: 'tipologia'
        },
        {
            name: 'lotto'
        },
        {
            name: 'produzione'
        },
        {
            name: 'luogo'
        },
        {
            type: 'float',
            name: 'importo'
        },
        {
            type: 'float',
            convert: function(v, rec) {
                var fineData = null;
                var storeFilters = Ext.StoreManager.lookup('storeRichiesteServizi').getFilters();
                for (var i = 0; i < storeFilters.items.length; i++){
                    if( storeFilters.items[i]._id === 'fineData'){
                        var t = storeFilters.items[i]._value.split("'").join("");
                        //console.log("T = " + t);
                        fineData = Date.parseExact(t,"yyyy-M-d");
                        //fineData = storeFilters.items[i]._value;
                        break;
                    }
                }

                if (fineData === null)return v;

                // Calcolo il costo totale di competenza del periodo preso in esame
                var dataInizioServizio = rec.get('data'),
                    dataFineServizio = rec.get('dataFine');

                /*
                Due casi:
                1) La data di fine Servizio è minore di quella di fineReport: i giorni necessari al computo sono: {dataFineServizio -dataInizioServizio}
                2) La data di fine serviizio è maggiore di quella di fineReport: i giorni necessari al computo sono: {dataFineReport - dataInizioServizio}
                */

                var giorniComputo = 0,
                    mesiComputo = 0;

                if (dataFineServizio <= fineData){
                    // caso 1: data minore di quella di fine report
                    // console.log( "data minore di quella di fine report!");
                    giorniComputo = daysBetween(dataInizioServizio.getTime() / 1000, dataFineServizio.getTime() / 1000);
                }
                else {
                    // caso 2
                    // console.log( "data maggiore di quella di fine report!");
                    giorniComputo = daysBetween(dataInizioServizio.getTime() / 1000, fineData.getTime() / 1000);
                }


                giorniComputo += 1; // Conta anche il giorno di inizio
                mesiComputo = giorniComputo / 30; // TODO: Controllare bene questa parte

                //console.log("Giorni computo: "  + giorniComputo);
                // Calcolo il costo totale in base alla tipologia e alle ore richieste * giorniComputo
                var ore = rec.get('ore'),
                    importo = rec.get('importo'),
                    tipologia = rec.get('tipologia');

                if (tipologia === 'Canone'){
                    return importo * parseInt(mesiComputo);
                }else if ( tipologia === 'Modulo'){
                    return importo * ore * giorniComputo;
                }else if ( tipologia === 'Richiesta'){
                    return importo * ore * giorniComputo;
                }
                else if (tipologia === 'Trasporto'){
                    return importo * ore * giorniComputo;

                }
                else return 0;
            },
            name: 'costoTotale'
        },
        {
            name: 'matricola'
        },
        {
            type: 'string',
            name: 'fornitore'
        },
        {
            type: 'string',
            name: 'divisione'
        },
        {
            type: 'string',
            name: 'stato'
        },
        {
            name: 'voce'
        },
        {
            name: 'operatore'
        },
        {
            name: 'utenteApprovante'
        }
    ]
});