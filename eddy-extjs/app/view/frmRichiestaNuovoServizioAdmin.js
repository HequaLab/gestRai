/*
 * File: app/view/frmRichiestaNuovoServizioAdmin.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Rai.view.frmRichiestaNuovoServizioAdmin', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.frmRichiestaNuovoServizioAdmin',

    id: 'frmRichiestaNuovoServizioAdmin',

    onShowWin: function(button, e, eOpts) {
        var panel = Ext.widget('winnuovatipologiaservizio');
        panel.show();
        button.disable();
    },

    changeDivisione: function(field, newValue, oldValue, eOpts) {

        var store = Ext.StoreManager.lookup('storeProduzioni');
        store.filter({
            property: "divisione",
            value: newValue ,
            operator: "streq"
        });

        var store = Ext.StoreManager.lookup('storeUtenti');
        store.filter({
            property: "divisione",
            value: newValue ,
            operator: "streq"
        });

        store = Ext.StoreManager.lookup('storeLuoghi');
        store.filter({
            property: "divisione",
            value: newValue ,
            operator: "streq"
        });

        store = Ext.StoreManager.lookup('storeServizi');
        store.load();
    },

    changeManager: function(field, newValue, oldValue, eOpts) {

    },

    changeOperatore: function(field, newValue, oldValue, eOpts) {


    },

    onLottoChange: function(field, newValue, oldValue, eOpts) {
        var lotto = Ext.getCmp('lottoAdmin').getValue(),
            tipologia = Ext.getCmp('comboTipologiaAdmin').getValue(),
            store = Ext.StoreManager.lookup('storeServizi');
        store.clearFilter();
        store.filter('lotto',lotto);
        if (tipologia !== undefined)store.filter('tipologia',tipologia);

    },

    onServizioCombo1Select: function(field, newValue, oldValue, eOpts) {

        var tipologia = Ext.getCmp('comboTipologiaAdmin').getValue();
        var store = Ext.StoreManager.lookup('storeServizi');
        store.clearFilter();
        store.filter('tipologia',tipologia);
        store.filter('lotto',Ext.getCmp('lottoAdmin').getValue());

        Ext.getCmp('oreRichiestaAdmin').labelEl.update('Ore');
        Ext.getCmp('oreRichiestaAdmin').enable();

        // Disabilitare numero ore per servizi canone e modulo
        if (tipologia == 'Canone'){
            Ext.getCmp('oreRichiestaAdmin').disable();
        }else if (tipologia == "Modulo"){
            Ext.getCmp('oreRichiestaAdmin').labelEl.update('Q.ta');
            Ext.getCmp('oreRichiestaAdmin').setValue(1);
        }
        else if (tipologia == 'Richiesta'){
            Ext.getCmp('oreRichiestaAdmin').setValue(4);
        }
        else if (tipologia == 'Trasporto'){
            Ext.getCmp('oreRichiestaAdmin').setValue(1);
        }


    },

    onMatricolaSelect: function(combo, record, eOpts) {
        Ext.getCmp('matricolaAdmin').setValue(record);
    },

    onMatricolaSelect1: function(combo, record, eOpts) {
        Ext.getCmp('produzioneAdmin').setValue(record);
    },

    onServizioComboSelect: function(combo, record, eOpts) {
        Ext.getCmp('codiciComboAdmin').setValue(record);
    },

    onDataRichiestaSelect: function(field, value, eOpts) {
        Ext.getCmp('dataFineAdmin').setValue(value);
    },

    onRichiediServizio: function(button, e, eOpts) {
        Ext.Msg.show({
            title: 'Richiesta servizio',
            msg: 'Stai per richiedere un servizio, vuoi continuae?',
            buttons: Ext.Msg.YESNO,
            buttonText: {
                no: 'No',
                yes: 'Si'
            },
            fn: function(btn) {
                if (btn == 'yes') {
                    var servizio = Ext.getCmp('servizioComboAdmin').getValue(),
                        uorg = Ext.getCmp('uorgAdmin').getValue(),
                        data = Ext.getCmp('dataRichiestaAdmin').getValue(),
                        ora = Ext.getCmp('oraRichiestaAdmin').getRawValue(),
                        ore = Ext.getCmp('oreRichiestaAdmin').getValue(),
                        dataFine = Ext.getCmp('dataFineAdmin').getValue(),
                        note = Ext.getCmp('noteRichiestaAdmin').getValue(),
                        filiale = USER.divisione,
                        stato = "Nessuno",
                        tipologia = Ext.getCmp('comboTipologiaAdmin').getValue(),
                        lotto = Ext.getCmp('lottoAdmin').getValue(),
                        matricola = Ext.getCmp('matricolaAdmin').getRawValue(),
                        produzione = Ext.getCmp('produzioneAdmin').getRawValue(),
                        luogoId = Ext.getCmp('luogoAdmin').getValue(),
                        index = (luogoId !== undefined ? Ext.StoreMgr.lookup("storeLuoghi").findExact('luoghiId', luogoId) : undefined),
                        rec = index !== undefined ? Ext.StoreMgr.lookup("storeLuoghi").getAt(index) : undfined,
                        luogo = rec !== null ? rec.get('descrizione') + " ( " + rec.get('indirizzo') + " - " + rec.get('cap') + " )" : "Nessuno",
                        importo = Ext.StoreManager.lookup("storeServizi").findRecord('serviziId', servizio).get('importo'),
                        nomeServizio = Ext.StoreManager.lookup("storeServizi").findRecord('serviziId', servizio).get('descrizione'),
                        operatore = USER.firstName + " " + USER.lastName,
                        voce = Ext.getCmp('codiciComboAdmin').getRawValue(),
                        idProduzione = Ext.getCmp('produzioneAdmin').getValue(),
                        idServizio = Ext.getCmp('servizioComboAdmin').getValue();

                    var costoTotale = 0;
                    if (tipologia === 'Canone') costoTotale = importo;
                    else if (tipologia === 'Modulo') costoTotale = importo * ore;
                    else if (tipologia === 'Richiesta') costoTotale = importo * ore;
                    else if (tipologia === 'Trasporto') costoTotale = importo * ore;
                    if (servizio === undefined || servizio === "") {
                        Ext.Msg.show({
                            title: 'Errore',
                            msg: "Non hai selezionato il servizio",
                            buttons: Ext.Msg.Ok,
                        });
                        return;
                    }
                    if ((data === undefined || data === null)) {
                        Ext.Msg.show({
                            title: 'Errore',
                            msg: "Non hai selezionato una data!",
                            buttons: Ext.Msg.Ok,
                        });
                        return;
                    }
                    if (tipologia !== 'Canone') {
                        if (ore === undefined || ore === null) {
                            Ext.Msg.show({
                                title: " Errore inserimento dati",
                                msg: "Devi inserire un quantitativo di ore valido."
                            });
                            return;
                        }
                        if (tipologia === 'Modulo' && ore < 1) {
                            Ext.Msg.show({
                                title: " Errore inserimento dati",
                                msg: "Per le richieste di tipo modulo devi richiedere almeno una unita'"
                            });
                            return;
                        }
                        if (tipologia === 'Richiesta' && ore < 4) {
                            Ext.Msg.show({
                                title: " Errore inserimento dati",
                                msg: "Per i servizi di tipo richiesta selezionare almeno  4 ore di lavoro"
                            });
                            return;
                        }
                        if (tipologia === 'Trasporto' && ore < 1) {
                            Ext.Msg.show({
                                title: " Errore inserimento dati",
                                msg: "Per i servizi di tipo trasporto selezionare almeno 1 ore di lavoro"
                            });
                            return;
                        }
                    }

                    var store = Ext.StoreManager.lookup('storeRichiesteServizi');
                    var emptyApp = new Rai.model.richiestaServizio();
                    emptyApp.set('nome', nomeServizio);
                    emptyApp.set('importo', importo);
                    emptyApp.set('divisione',Ext.getCmp('divisioneAdmin').getValue());
                    emptyApp.set('ora', ora);
                    emptyApp.set('data', data);
                    emptyApp.set('uorg', uorg);
                    emptyApp.set('ore', ore);
                    emptyApp.set('note', note);
                    emptyApp.set('stato', stato);
                    emptyApp.set('dataFine', dataFine);
                    emptyApp.set('tipologia', tipologia);
                    emptyApp.set('lotto', lotto);
                    emptyApp.set('matricola', matricola);
                    emptyApp.set('produzione', produzione);
                    emptyApp.set('luogo', luogo);
                    emptyApp.set('operatore', operatore);
                    emptyApp.set('voce', voce);
                    emptyApp.set('luogoId', luogoId);
                    emptyApp.set('idProduzione', idProduzione);
                    emptyApp.set('idServizio', idServizio);

                    var oggJson = emptyApp.data;
                    delete oggJson.richiestaNuovoServizioId;

                    oggJson.data = data.getTime() / 1000;
                    oggJson.dataFine = dataFine.getTime() / 1000;
                    oggJson.operatore = Ext.getCmp('operatoreAdmin').getValue();
                    oggJson.utenteApprovante = Ext.getCmp('managerAdmin').getValue();


                    // Approvo la richiesta
                    Ext.MessageBox.wait('Inserisco la richiesta..');
                    Ext.Ajax.request({
                        url: '/richiestaNuovoServizio/servizioUrgente',
                        headers: {
                            'Authorization': 'Bearer ' + ACCESS_TOKEN,
                        },
                        jsonData:oggJson,
                        method:'POST',
                        success: function (response, options) {
                            Ext.StoreManager.lookup('storeRichiesteServizi').load();
                            Ext.MessageBox.updateProgress(1);
                            Ext.MessageBox.hide();
                            Ext.Msg.show({
                                title:'Richiesta inserita',
                                msg: "Richiesta inserita con successo.",
                                buttons: Ext.Msg.Ok,
                            });},
                            failure: function (response, options) {
                                Ext.MessageBox.updateProgress(1);
                                Ext.MessageBox.hide();
                                Ext.Msg.show({
                                    title:'Errore con il server',
                                    msg: "C'è stato un errore durante l'approvazione della richiesta. Errore: " + response.status,
                                    buttons: Ext.Msg.Ok,
                                });
                            }
                        });


                        Ext.getCmp('oreRichiestaAdmin').disable();
                        Ext.getCmp('oreRichiestaAdmin').labelEl.update('Q.ta');
                        Ext.getCmp('servizioComboAdmin').setValue(null);
                        Ext.getCmp('uorgAdmin').setValue(null);
                        Ext.getCmp('dataRichiestaAdmin').setValue(null);
                        Ext.getCmp('oraRichiestaAdmin').setValue(null);
                        Ext.getCmp('oreRichiestaAdmin').setValue(null);
                        Ext.getCmp('dataFineAdmin').setValue(null);
                        Ext.getCmp('noteRichiestaAdmin').setValue(null);
                        Ext.getCmp('comboTipologiaAdmin').setValue(null);
                        Ext.getCmp('lottoAdmin').setValue(null);
                        Ext.getCmp('dataFineAdmin').setValue(null);
                        Ext.getCmp('codiciComboAdmin').setValue(null);
                        Ext.getCmp('matricolaAdmin').setValue(null);
                        Ext.getCmp('lottoAdmin').setValue(null);
                        Ext.getCmp('luogoAdmin').setValue(null);
                        Ext.getCmp('produzioneAdmin').setValue(null);
                    }
                }, animEl: 'elId'
            });
    },

    onClear: function(button, e, eOpts) {
        Ext.getCmp('divisioneAdmin').setValue(null);
        Ext.getCmp('operatoreAdmin').setValue(null);
        Ext.getCmp('managerAdmin').setValue(null);



        Ext.getCmp('servizioComboAdmin').setValue(null);
        Ext.getCmp('dataRichiestaAdmin').setValue(null);
        Ext.getCmp('oraRichiestaAdmin').setValue(null);
        Ext.getCmp('oreRichiestaAdmin').setValue(null);
        Ext.getCmp('dataFineAdmin').setValue(null);
        Ext.getCmp('noteRichiestaAdmin').setValue(null);
        Ext.getCmp('comboTipologiaAdmin').setValue(null);
        Ext.getCmp('lottoAdmin').setValue(null);
        Ext.getCmp('dataFineAdmin').setValue(null);
        Ext.getCmp('codiciComboAdmin').setValue(null);
        Ext.getCmp('matricolaAdmin').setValue(null);
        Ext.getCmp('lottoAdmin').setValue(null);
        Ext.getCmp('luogoAdmin').setValue(null);
        Ext.getCmp('produzioneAdmin').setValue(null);
        Ext.getCmp('uorgAdmin').setValue(null);
    },

    onFrmrichiestanuovoservizioAfterRender: function(component, eOpts) {

        var store = Ext.StoreManager.lookup('storeRichiesteServizi');
        store.sort({
            property: "timeStamp",
            direction: "ASC"
        });

        store.load();

        store = Ext.StoreManager.lookup('storeServizi');
        store.load();
    },

    onToolClick: function(tool, e, owner, eOpts) {
        return ;
        var win = Ext.create('Ext.window.Window', {
            height: 634,
            width: 780,
            layout: 'border',
            title: 'Report servizio',
            titleAlign: 'center',
            maximizable: true,
            closeAction: 'hide',
            items: [{
                xtype: 'component',
                html : '<iframe src="'+ "http://www.youtube.com/embed/XGSy3_Czz8k?autoplay=1" + '" width="100%" height="100%"></iframe>',
            }]
        });
        win.show();
    }

});
