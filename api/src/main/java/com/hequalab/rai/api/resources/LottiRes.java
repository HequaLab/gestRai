package com.hequalab.rai.api.resources;

/*
 * Class generated by AppWizard
 */

import io.dropwizard.hibernate.UnitOfWork;
import io.dropwizard.jersey.caching.CacheControl;
import java.io.IOException;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;
import org.hibernate.SessionFactory;
import com.codahale.metrics.annotation.Timed;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.hequalab.rai.api.dtos.Page;
import com.hequalab.rai.api.params.ExtJsParams;
import com.hequalab.rai.api.params.LottiIdParam;
import com.hequalab.rai.api.read.views.lotti.LottiView;
import com.hequalab.rai.dddd.AggregateSessionFactory;


import com.hequalab.rai.api.read.views.user.UserView;
import io.dropwizard.auth.Auth;

import com.hequalab.rai.api.dtos.lotti.LottiCreate;
import com.hequalab.rai.api.dtos.lotti.LottiUpdate;

import com.hequalab.rai.domain.lotti.Lotti;
import com.hequalab.rai.domain.lotti.LottiId;

@SuppressWarnings("unused")
@Path("/lotti")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class LottiRes extends AbstractRes {

	public LottiRes(AggregateSessionFactory aggregateSessionFactory,
			SessionFactory sessionFactory) {
		super(aggregateSessionFactory, sessionFactory);
	}
	
	@GET
	@UnitOfWork
	@Timed
	@CacheControl(noCache = true)
	public Page<LottiView> list(@Auth UserView user,
			@DefaultValue("1") @QueryParam("page") Integer page,
			@DefaultValue("10") @QueryParam("limit") Integer size,
			@DefaultValue("") @QueryParam("filter") String filter,
			@DefaultValue("") @QueryParam("sort") String sort) throws Exception {

		ExtJsParams filterParams = new ExtJsParams(
				"select wv from LottiView wv ", "wv");
		filterParams.addFilters(filter);
		filterParams.addOrders(sort);
		@SuppressWarnings("unchecked")
		List<LottiView> dnv = hibSess().createQuery(
				filterParams.getSqlStatement()).list();

		return page(dnv, page, size);
	}
	
	@GET @Path("/{id}")
	@UnitOfWork @Timed
	@CacheControl(noCache = true)
	public LottiView fetch(@PathParam("id") LottiIdParam id) {
		return (LottiView) hibSess()
				.createQuery("from LottiView where lottiId = :id")
				.setParameter("id", id.get()).uniqueResult();
	}

	@DELETE
	@Path("{id}")
	@UnitOfWork
	@Timed
	public void delete(@Auth UserView user, @PathParam("id") LottiIdParam id)
			throws IllegalAccessException, JsonParseException,
			JsonMappingException, IOException {
		aggSess().save(aggSess().get(Lotti.class, id.get()).delete());
	}

	@POST
	@UnitOfWork
	@Timed
	public LottiView create(@Auth UserView user, @Valid LottiCreate form,
			@Context UriInfo uriInfo) throws IllegalAccessException {
		
		
		LottiId id = new LottiId();
		Lotti rec = new Lotti(id, form.getDescrizione(),form.getDivisione());
		aggSess().save(rec);

		LottiView uv = new LottiView();
		uv.setLottiId(id);
		uv.setDescrizione(form.getDescrizione());
		uv.setDivisione(form.getDivisione());
		return uv;
	}

	@PUT
	@Path("{id}")
	@UnitOfWork
	@Timed
	public LottiView update(@Auth UserView user, @PathParam("id") LottiIdParam id,
			@Valid LottiUpdate rep) throws IllegalAccessException {

		LottiView recOld = (LottiView) hibSess()
				.createQuery("from LottiView where lottiId = :id")
				.setParameter("id", id.get()).uniqueResult();
				
		String descrizione = rep.getDescrizione() != null ? rep.getDescrizione() : recOld.getDescrizione();
		String divisione = rep.getDivisione() != null ? rep.getDivisione() : recOld.getDivisione();


		

		aggSess().save(
				aggSess().get(Lotti.class, id.get()).update( descrizione,divisione ));
				

		LottiView uv = new LottiView();
		uv.setLottiId(id.get());
		uv.setDescrizione(descrizione);
		uv.setDivisione(divisione);
		
		return uv;
	}
	
	
	
}