package com.hequalab.rai.api.resources;

/*
 * Class generated by AppWizard
 */

import io.dropwizard.hibernate.UnitOfWork;
import io.dropwizard.jersey.caching.CacheControl;

import java.io.IOException;
import java.util.List;
import java.util.Set;

import javax.validation.Valid;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;

import org.hibernate.SessionFactory;

import com.codahale.metrics.annotation.Timed;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.hequalab.rai.api.dtos.Page;
import com.hequalab.rai.api.params.ExtJsParams;
import com.hequalab.rai.api.params.LuoghiIdParam;
import com.hequalab.rai.api.read.views.luoghi.LuoghiView;
import com.hequalab.rai.dddd.AggregateSessionFactory;
import com.hequalab.rai.api.read.views.user.UserView;

import io.dropwizard.auth.Auth;

import com.hequalab.rai.api.dtos.luoghi.LuoghiCreate;
import com.hequalab.rai.api.dtos.luoghi.LuoghiUpdate;
import com.hequalab.rai.domain.luoghi.Luoghi;
import com.hequalab.rai.domain.luoghi.LuoghiId;

@SuppressWarnings("unused")
@Path("/luoghi")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class LuoghiRes extends AbstractRes {

	public LuoghiRes(AggregateSessionFactory aggregateSessionFactory,
			SessionFactory sessionFactory) {
		super(aggregateSessionFactory, sessionFactory);
	}
	
	@GET
	@UnitOfWork
	@Timed
	@CacheControl(noCache = true)
	public Page<LuoghiView> list(@Auth UserView user,
			@DefaultValue("1") @QueryParam("page") Integer page,
			@DefaultValue("10") @QueryParam("limit") Integer size,
			@DefaultValue("") @QueryParam("filter") String filter,
			@DefaultValue("") @QueryParam("sort") String sort) throws Exception {

		ExtJsParams filterParams = new ExtJsParams(
				"select wv from LuoghiView wv ", "wv");
		filterParams.addFilters(filter);
		filterParams.addOrders(sort);
		@SuppressWarnings("unchecked")
		List<LuoghiView> dnv = hibSess().createQuery(
				filterParams.getSqlStatement()).list();

		return page(dnv, page, size);
	}
	
	@GET @Path("/{id}")
	@UnitOfWork @Timed
	@CacheControl(noCache = true)
	public LuoghiView fetch(@PathParam("id") LuoghiIdParam id) {
		return (LuoghiView) hibSess()
				.createQuery("from LuoghiView where luoghiId = :id")
				.setParameter("id", id.get()).uniqueResult();
	}

	@DELETE
	@Path("{id}")
	@UnitOfWork
	@Timed
	public void delete(@Auth UserView user, @PathParam("id") LuoghiIdParam id)
			throws IllegalAccessException, JsonParseException,
			JsonMappingException, IOException {
		aggSess().save(aggSess().get(Luoghi.class, id.get()).delete());
	}

	@POST
	@UnitOfWork
	@Timed
	public LuoghiView create(@Auth UserView user, @Valid LuoghiCreate form,
			@Context UriInfo uriInfo) throws IllegalAccessException {
		
		
		LuoghiId id = new LuoghiId();
		Luoghi rec = new Luoghi(id, form.getIndirizzo(), form.getDescrizione(), form.getCap(),form.getDivisione());
		aggSess().save(rec);
		
		LuoghiView uv = new LuoghiView();
		uv.setLuoghiId(id);
		uv.setIndirizzo(form.getIndirizzo());
		uv.setDescrizione(form.getDescrizione());
		uv.setCap(form.getCap());
		uv.setDivisione(form.getDivisione());
		return uv;
	}

	@PUT
	@Path("{id}")
	@UnitOfWork
	@Timed
	public LuoghiView update(@Auth UserView user, @PathParam("id") LuoghiIdParam id,
			@Valid LuoghiUpdate rep) throws IllegalAccessException {

		LuoghiView recOld = (LuoghiView) hibSess()
				.createQuery("from LuoghiView where luoghiId = :id")
				.setParameter("id", id.get()).uniqueResult();
				
		String indirizzo = rep.getIndirizzo() != null ? rep.getIndirizzo() : recOld.getIndirizzo();
		String descrizione = rep.getDescrizione() != null ? rep.getDescrizione() : recOld.getDescrizione();
		String cap = rep.getCap() != null ? rep.getCap() : recOld.getCap();
		String divisione = rep.getDivisione() != null ? rep.getDivisione() : recOld.getDivisione();
		

		aggSess().save(
				aggSess().get(Luoghi.class, id.get()).update( indirizzo, descrizione, cap, divisione ));
				

		LuoghiView uv = new LuoghiView();
		uv.setLuoghiId(id.get());
		uv.setIndirizzo(indirizzo);
		uv.setDescrizione(descrizione);
		uv.setCap(cap);
		uv.setDivisione(divisione);
		
		return uv;
	}
	
	
	
}