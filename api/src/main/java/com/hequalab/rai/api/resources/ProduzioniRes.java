package com.hequalab.rai.api.resources;

/*
 * Class generated by AppWizard
 */

import io.dropwizard.hibernate.UnitOfWork;
import io.dropwizard.jersey.caching.CacheControl;

import java.io.IOException;
import java.util.List;
import java.util.Set;

import javax.validation.Valid;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;

import org.hibernate.SessionFactory;

import com.codahale.metrics.annotation.Timed;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.hequalab.rai.api.dtos.Page;
import com.hequalab.rai.api.params.ExtJsParams;
import com.hequalab.rai.api.params.ProduzioniIdParam;
import com.hequalab.rai.api.read.views.produzioni.ProduzioniView;
import com.hequalab.rai.dddd.AggregateSessionFactory;
import com.hequalab.rai.api.read.views.user.UserView;

import io.dropwizard.auth.Auth;

import com.hequalab.rai.api.dtos.produzioni.ProduzioniCreate;
import com.hequalab.rai.api.dtos.produzioni.ProduzioniUpdate;
import com.hequalab.rai.domain.produzioni.Produzioni;
import com.hequalab.rai.domain.produzioni.ProduzioniId;

@SuppressWarnings("unused")
@Path("/produzioni")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ProduzioniRes extends AbstractRes {

	public ProduzioniRes(AggregateSessionFactory aggregateSessionFactory,
			SessionFactory sessionFactory) {
		super(aggregateSessionFactory, sessionFactory);
	}

	@GET
	@UnitOfWork
	@Timed
	@CacheControl(noCache = true)
	public Page<ProduzioniView> list(@Auth UserView user,
			@DefaultValue("1") @QueryParam("page") Integer page,
			@DefaultValue("10") @QueryParam("limit") Integer size,
			@DefaultValue("") @QueryParam("filter") String filter,
			@DefaultValue("") @QueryParam("sort") String sort) throws Exception {

		ExtJsParams filterParams = new ExtJsParams(
				"select wv from ProduzioniView wv ", "wv");
		filterParams.addFilters(filter);
		filterParams.addOrders(sort);
		@SuppressWarnings("unchecked")
		List<ProduzioniView> dnv = hibSess().createQuery(
				filterParams.getSqlStatement()).list();

		return page(dnv, page, size);
	}

	@GET
	@Path("/{id}")
	@UnitOfWork
	@Timed
	@CacheControl(noCache = true)
	public ProduzioniView fetch(@PathParam("id") ProduzioniIdParam id) {
		return (ProduzioniView) hibSess()
				.createQuery("from ProduzioniView where produzioniId = :id")
				.setParameter("id", id.get()).uniqueResult();
	}

	@DELETE
	@Path("{id}")
	@UnitOfWork
	@Timed
	public void delete(@Auth UserView user,
			@PathParam("id") ProduzioniIdParam id)
			throws IllegalAccessException, JsonParseException,
			JsonMappingException, IOException {
		aggSess().save(user.getUserId().getUuid(),aggSess().get(Produzioni.class, id.get()).delete());
	}

	@POST
	@UnitOfWork
	@Timed
	public ProduzioniView create(@Auth UserView user,
			@Valid ProduzioniCreate form, @Context UriInfo uriInfo)
			throws IllegalAccessException {

		ProduzioniId id = new ProduzioniId();
		Produzioni rec = new Produzioni(id, form.getDescrizione(),
				form.getDivisione(), form.getMatricola());
		
		aggSess().save(user.getUserId().getUuid(),rec);

		ProduzioniView uv = new ProduzioniView();
		uv.setProduzioniId(id);
		uv.setDescrizione(form.getDescrizione());
		uv.setDivisione(form.getDivisione());
		return uv;
	}

	@PUT
	@Path("{id}")
	@UnitOfWork
	@Timed
	public ProduzioniView update(@Auth UserView user,
			@PathParam("id") ProduzioniIdParam id, @Valid ProduzioniUpdate rep)
			throws IllegalAccessException {

		ProduzioniView recOld = (ProduzioniView) hibSess()
				.createQuery("from ProduzioniView where produzioniId = :id")
				.setParameter("id", id.get()).uniqueResult();

		String descrizione = rep.getDescrizione() != null ? rep
				.getDescrizione() : recOld.getDescrizione();
		String divisione = rep.getDivisione() != null ? rep.getDivisione()
				: recOld.getDivisione();
		String matricola = rep.getMatricola()!= null ? rep.getMatricola()
			: recOld.getMatricola();

		aggSess().save(user.getUserId().getUuid(),
				aggSess().get(Produzioni.class, id.get()).update(descrizione,
						divisione,matricola));

		ProduzioniView uv = new ProduzioniView();
		uv.setProduzioniId(id.get());
		uv.setDescrizione(descrizione);
		uv.setDivisione(divisione);
		uv.setMatricola(matricola);
		return uv;
	}

}