package com.hequalab.rai.api.resources;

/*
 * Class generated by AppWizard
 */

import io.dropwizard.hibernate.UnitOfWork;
import io.dropwizard.jersey.caching.CacheControl;
import java.io.IOException;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;
import org.hibernate.SessionFactory;
import com.codahale.metrics.annotation.Timed;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.hequalab.rai.api.dtos.Page;
import com.hequalab.rai.api.params.ExtJsParams;
import com.hequalab.rai.api.params.ServiziIdParam;
import com.hequalab.rai.api.read.views.servizi.ServiziView;
import com.hequalab.rai.dddd.AggregateSessionFactory;

import com.hequalab.rai.api.read.views.user.UserView;
import io.dropwizard.auth.Auth;

import com.hequalab.rai.api.dtos.servizi.ServiziCreate;
import com.hequalab.rai.api.dtos.servizi.ServiziUpdate;

import com.hequalab.rai.domain.servizi.Servizi;
import com.hequalab.rai.domain.servizi.ServiziId;

@SuppressWarnings("unused")
@Path("/servizi")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ServiziRes extends AbstractRes {

	public ServiziRes(AggregateSessionFactory aggregateSessionFactory,
			SessionFactory sessionFactory) {
		super(aggregateSessionFactory, sessionFactory);
	}

	@GET
	@UnitOfWork
	@Timed
	@CacheControl(noCache = true)
	public Page<ServiziView> list(@Auth UserView user,
			@DefaultValue("1") @QueryParam("page") Integer page,
			@DefaultValue("10") @QueryParam("limit") Integer size,
			@DefaultValue("") @QueryParam("filter") String filter,
			@DefaultValue("") @QueryParam("sort") String sort) throws Exception {

		ExtJsParams filterParams = new ExtJsParams(
				"select wv from ServiziView wv ", "wv");
		filterParams.addFilters(filter);
		filterParams.addOrders(sort);
		@SuppressWarnings("unchecked")
		List<ServiziView> dnv = hibSess().createQuery(
				filterParams.getSqlStatement()).list();

		return page(dnv, page, size);
	}

	@GET
	@Path("/{id}")
	@UnitOfWork
	@Timed
	@CacheControl(noCache = true)
	public ServiziView fetch(@PathParam("id") ServiziIdParam id) {
		return (ServiziView) hibSess()
				.createQuery("from ServiziView where serviziId = :id")
				.setParameter("id", id.get()).uniqueResult();
	}

	@DELETE
	@Path("{id}")
	@UnitOfWork
	@Timed
	public void delete(@Auth UserView user, @PathParam("id") ServiziIdParam id)
			throws IllegalAccessException, JsonParseException,
			JsonMappingException, IOException {
		aggSess().save(user.getUserId().getUuid(), aggSess().get(Servizi.class, id.get()).delete());
	}

	@POST
	@UnitOfWork
	@Timed
	public ServiziView create(@Auth UserView user, @Valid ServiziCreate form,
			@Context UriInfo uriInfo) throws IllegalAccessException {

		ServiziId id = new ServiziId();
		Servizi rec = new Servizi(id, form.getDescrizione(), form.getlotto(), form.getImporto(), form.getNote(), form.getTipologia(), form.getCodice(), form.getTipo());
		aggSess().save(user.getUserId().getUuid(), rec);

		ServiziView uv = new ServiziView();
		uv.setServiziId(id);
		uv.setDescrizione(form.getDescrizione());
		uv.setlotto(form.getlotto());
		uv.setImporto(form.getImporto());
		uv.setNote(form.getNote());
		uv.setTipologia(form.getTipologia());
		uv.setCodice(form.getCodice());
		uv.setTipo(form.getTipo());
		return uv;
	}

	@PUT
	@Path("{id}")
	@UnitOfWork
	@Timed
	public ServiziView update(@Auth UserView user, @PathParam("id") ServiziIdParam id,
			@Valid ServiziUpdate rep) throws IllegalAccessException {

		ServiziView recOld = (ServiziView) hibSess()
				.createQuery("from ServiziView where serviziId = :id")
				.setParameter("id", id.get()).uniqueResult();

		String descrizione = rep.getDescrizione() != null ? rep.getDescrizione() : recOld.getDescrizione();
		String lotto = rep.getlotto() != null ? rep.getlotto() : recOld.getlotto();
		Double importo = rep.getImporto() != null ? rep.getImporto() : recOld.getImporto();
		String note = rep.getNote() != null ? rep.getNote() : recOld.getNote();
		String tipologia = rep.getTipologia() != null ? rep.getTipologia() : recOld.getTipologia();
		String codice = rep.getCodice() != null ? rep.getCodice() : recOld.getCodice();
		String tipo = rep.getTipo() != null ? rep.getTipo() : recOld.getTipo();

		aggSess().save(user.getUserId().getUuid(),
				aggSess().get(Servizi.class, id.get()).update(descrizione, lotto, importo, note, tipologia, codice, tipo));

		ServiziView uv = new ServiziView();
		uv.setServiziId(id.get());
		uv.setDescrizione(descrizione);
		uv.setlotto(lotto);
		uv.setImporto(importo);
		uv.setNote(note);
		uv.setTipologia(tipologia);
		uv.setCodice(codice);
		uv.setTipo(tipo);

		return uv;
	}

}