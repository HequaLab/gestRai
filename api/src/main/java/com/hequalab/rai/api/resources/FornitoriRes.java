package com.hequalab.rai.api.resources;

/*
 * Class generated by AppWizard
 */

import io.dropwizard.hibernate.UnitOfWork;
import io.dropwizard.jersey.caching.CacheControl;
import java.io.IOException;
import java.util.List;
import java.util.Set;
import javax.validation.Valid;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;
import org.hibernate.SessionFactory;
import com.codahale.metrics.annotation.Timed;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.hequalab.rai.api.dtos.Page;
import com.hequalab.rai.api.params.ExtJsParams;
import com.hequalab.rai.api.params.FornitoriIdParam;
import com.hequalab.rai.api.read.views.fornitori.FornitoriView;
import com.hequalab.rai.dddd.AggregateSessionFactory;


import com.hequalab.rai.api.read.views.user.UserView;
import io.dropwizard.auth.Auth;

import com.hequalab.rai.api.dtos.fornitori.FornitoriCreate;
import com.hequalab.rai.api.dtos.fornitori.FornitoriUpdate;

import com.hequalab.rai.domain.fornitori.Fornitori;
import com.hequalab.rai.domain.fornitori.FornitoriId;

@SuppressWarnings("unused")
@Path("/fornitori")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class FornitoriRes extends AbstractRes {

	public FornitoriRes(AggregateSessionFactory aggregateSessionFactory,
			SessionFactory sessionFactory) {
		super(aggregateSessionFactory, sessionFactory);
	}
	
	@GET
	@UnitOfWork
	@Timed
	@CacheControl(noCache = true)
	public Page<FornitoriView> list(@Auth UserView user,
			@DefaultValue("1") @QueryParam("page") Integer page,
			@DefaultValue("10") @QueryParam("limit") Integer size,
			@DefaultValue("") @QueryParam("filter") String filter,
			@DefaultValue("") @QueryParam("sort") String sort) throws Exception {

		ExtJsParams filterParams = new ExtJsParams(
				"select wv from FornitoriView wv ", "wv");
		filterParams.addFilters(filter);
		filterParams.addOrders(sort);
		@SuppressWarnings("unchecked")
		List<FornitoriView> dnv = hibSess().createQuery(
				filterParams.getSqlStatement()).list();

		return page(dnv, page, size);
	}
	
	@GET @Path("/{id}")
	@UnitOfWork @Timed
	@CacheControl(noCache = true)
	public FornitoriView fetch(@PathParam("id") FornitoriIdParam id) {
		return (FornitoriView) hibSess()
				.createQuery("from FornitoriView where fornitoriId = :id")
				.setParameter("id", id.get()).uniqueResult();
	}

	@DELETE
	@Path("{id}")
	@UnitOfWork
	@Timed
	public void delete(@Auth UserView user, @PathParam("id") FornitoriIdParam id)
			throws IllegalAccessException, JsonParseException,
			JsonMappingException, IOException {
		aggSess().save(aggSess().get(Fornitori.class, id.get()).delete());
	}

	@POST
	@UnitOfWork
	@Timed
	public FornitoriView create(@Auth UserView user, @Valid FornitoriCreate form,
			@Context UriInfo uriInfo) throws IllegalAccessException {
		
		
		FornitoriId id = new FornitoriId();
		Fornitori rec = new Fornitori(id, form.getNote(), form.getRagioneSociale());
		aggSess().save(rec);

		FornitoriView uv = new FornitoriView();
		uv.setFornitoriId(id);
		uv.setNote(form.getNote());
		uv.setRagioneSociale(form.getRagioneSociale());
		return uv;
	}

	@PUT
	@Path("{id}")
	@UnitOfWork
	@Timed
	public FornitoriView update(@Auth UserView user, @PathParam("id") FornitoriIdParam id,
			@Valid FornitoriUpdate rep) throws IllegalAccessException {

		FornitoriView recOld = (FornitoriView) hibSess()
				.createQuery("from FornitoriView where fornitoriId = :id")
				.setParameter("id", id.get()).uniqueResult();
				
		String note = rep.getNote() != null ? rep.getNote() : recOld.getNote();
		String ragioneSociale = rep.getRagioneSociale() != null ? rep.getRagioneSociale() : recOld.getRagioneSociale();
			

		

		aggSess().save(
				aggSess().get(Fornitori.class, id.get()).update( note, ragioneSociale ));
				

		FornitoriView uv = new FornitoriView();
		uv.setFornitoriId(id.get());
		uv.setNote(note);
		uv.setRagioneSociale(ragioneSociale);
		
		return uv;
	}
	
	
	
}